<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–æ–±–ª–µ–º–∞ Jeans</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        input, select, textarea { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 5px; box-sizing: border-box; }
        textarea { height: 80px; resize: vertical; }
        .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; width: 100%; }
        .btn:hover { background: #0056b3; }
        .btn:disabled { background: #6c757d; cursor: not-allowed; }
        .file-input { display: none; }
        .file-btn { background: #28a745; color: white; padding: 8px 15px; border: none; border-radius: 5px; cursor: pointer; display: inline-block; margin-right: 10px; }
        .file-list { margin-top: 10px; }
        .file-item { background: #f8f9fa; padding: 8px; margin: 5px 0; border-radius: 5px; border-left: 4px solid #007bff; }
        .required::after { content: " *"; color: red; }
        .loading { display: none; text-align: center; margin: 10px 0; }
        .spinner { border: 4px solid #f3f3f3; border-top: 4px solid #007bff; border-radius: 50%; width: 30px; height: 30px; animation: spin 2s linear infinite; margin: 0 auto; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
</head>
<body>
    <div class="container">
        <h2>üì± –ü—Ä–æ–±–ª–µ–º–∞ Jeans</h2>
        
        <form id="jeansForm">
            <div class="form-group">
                <label class="required">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</label>
                <textarea name="problem_description" required placeholder="–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã..."></textarea>
            </div>

            <div class="form-group">
                <label class="required">–ü—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ —É –≤–∞—Å –∏–ª–∏ –º–∞—Å—Å–æ–≤–∞—è?</label>
                <select name="problem_scope" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç</option>
                    <option value="—É –º–µ–Ω—è">–¢–æ–ª—å–∫–æ —É –º–µ–Ω—è</option>
                    <option value="–º–∞—Å—Å–æ–≤–∞—è">–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞</option>
                </select>
            </div>

            <div class="form-group">
                <label>–°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞</label>
                <button type="button" class="file-btn" onclick="document.getElementById('fileInput').click()">
                    üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª
                </button>
                <input type="file" id="fileInput" class="file-input" accept="image/*,video/*,.pdf" multiple>
                <div id="fileList" class="file-list"></div>
            </div>

            <div class="form-group">
                <label class="required">–õ–æ–≥–∏–Ω –¢–ü–î</label>
                <input type="text" name="tpd_login" required value="" placeholder="–í–∞—à –ª–æ–≥–∏–Ω">
            </div>

            <div class="form-group">
                <label class="required">ID –¢–¢, –≥–¥–µ –±—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞</label>
                <input type="text" name="tt_id" required placeholder="–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏">
            </div>

            <div class="form-group">
                <label>–í–µ—Ä—Å–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</label>
                <input type="text" name="device_version" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Android 12, iOS 15">
            </div>

            <div class="form-group">
                <label>–í–µ—Ä—Å–∏—è Jeans/–í–µ—Ä—Å–∏—è JedAI</label>
                <input type="text" name="app_version" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Jeans 2.5.1">
            </div>

            <div class="form-group">
                <label class="required">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã</label>
                <input type="datetime-local" name="problem_date" required>
            </div>

            <div class="form-group">
                <label class="required">–ü—Ä–æ–±–ª–µ–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—Å–µ–≥–¥–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å?</label>
                <input type="text" name="reproducibility" required placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≤—Å–µ–≥–¥–∞, —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏">
            </div>

            <div class="form-group">
                <label class="required">–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —à–∞–≥–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è</label>
                <textarea name="steps_to_reproduce" required placeholder="–ü–æ—à–∞–≥–æ–≤–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è..."></textarea>
            </div>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è...</p>
            </div>

            <button type="submit" class="btn" id="submitBtn">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ</button>
        </form>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp
        Telegram.WebApp.ready();
        
        let selectedFiles = [];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        document.getElementById('fileInput').addEventListener('change', function(e) {
            const files = Array.from(this.files);
            selectedFiles = [...selectedFiles, ...files];
            updateFileList();
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        function updateFileList() {
            const fileList = document.getElementById('fileList');
            fileList.innerHTML = '';
            
            selectedFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    ${file.name} (${formatFileSize(file.size)})
                    <button type="button" onclick="removeFile(${index})" style="background: #dc3545; color: white; border: none; border-radius: 3px; padding: 2px 8px; margin-left: 10px; cursor: pointer;">
                        ‚úï
                    </button>
                `;
                fileList.appendChild(fileItem);
            });
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updateFileList();
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        const userDataParam = urlParams.get('user_data');
        let userData = {};
        if (userDataParam) {
            try {
                userData = JSON.parse(decodeURIComponent(userDataParam));
                document.querySelector('input[name="tpd_login"]').value = userData.tpd_login || '';
            } catch (e) {
                console.error('Error parsing user data:', e);
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        function buildDescription(formData) {
            const fields = {
                '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã': formData.get('problem_description'),
                '–û–±–ª–∞—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã': formData.get('problem_scope'),
                '–õ–æ–≥–∏–Ω –¢–ü–î': formData.get('tpd_login'),
                'ID –¢–¢': formData.get('tt_id'),
                '–í–µ—Ä—Å–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞': formData.get('device_version'),
                '–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è': formData.get('app_version'),
                '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–±–ª–µ–º—ã': formData.get('problem_date'),
                '–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å': formData.get('reproducibility'),
                '–®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è': formData.get('steps_to_reproduce')
            };

            let description = '**–ü–†–û–ë–õ–ï–ú–ê JEANS**\n\n';
            for (const [fieldName, fieldValue] of Object.entries(fields)) {
                if (fieldValue && fieldValue.trim() !== '') {
                    description += `**${fieldName}:** ${fieldValue}\n\n`;
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
            if (selectedFiles.length > 0) {
                description += `**–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:** ${selectedFiles.length} —Ñ–∞–π–ª(–æ–≤)\n`;
                selectedFiles.forEach(file => {
                    description += `- ${file.name} (${formatFileSize(file.size)})\n`;
                });
            }

            return description.trim();
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–∞–∫ base64
        function readFileAsBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result.split(',')[1]); // –£–±–∏—Ä–∞–µ–º data:image/... –ø—Ä–µ—Ñ–∏–∫—Å
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        document.getElementById('jeansForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const submitBtn = document.getElementById('submitBtn');
            const loading = document.getElementById('loading');
            submitBtn.disabled = true;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
            loading.style.display = 'block';
            
            try {
                const formData = new FormData(this);
                const description = buildDescription(formData);
                
                // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ base64
                const fileDataPromises = selectedFiles.map(file => readFileAsBase64(file));
                const fileData = await Promise.all(fileDataPromises);
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const data = {
                    form_type: "–ü—Ä–æ–±–ª–µ–º–∞ Jeans",
                    description: description,
                    form_data: {
                        problem_description: formData.get('problem_description'),
                        problem_scope: formData.get('problem_scope'),
                        tpd_login: formData.get('tpd_login'),
                        tt_id: formData.get('tt_id'),
                        device_version: formData.get('device_version'),
                        app_version: formData.get('app_version'),
                        problem_date: formData.get('problem_date'),
                        reproducibility: formData.get('reproducibility'),
                        steps_to_reproduce: formData.get('steps_to_reproduce')
                    },
                    file_count: selectedFiles.length,
                    file_names: selectedFiles.map(f => f.name),
                    file_data: fileData,
                    file_types: selectedFiles.map(f => f.type)
                };
                
                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–∞...');
                
                // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–†–ê–ó–£ - –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                Telegram.WebApp.sendData(JSON.stringify(data));
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                Telegram.WebApp.showAlert('–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ó–∞–∫—Ä—ã–≤–∞—é —Ñ–æ—Ä–º—É...');
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    Telegram.WebApp.close();
                }, 1500);
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
                Telegram.WebApp.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                submitBtn.disabled = false;
                submitBtn.textContent = 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ';
                loading.style.display = 'none';
            }
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º WebApp
        Telegram.WebApp.expand();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const now = new Date();
        const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
        document.querySelector('input[name="problem_date"]').value = localDateTime;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É MainButton, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–∞
        Telegram.WebApp.MainButton.hide();
    </script>
</body>
</html>
